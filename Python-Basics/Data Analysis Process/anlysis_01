"""
Created on Sun Jan 28 19:52:51 2018

@author: Carol Lin
"""

## Representing a csv as a list of rows

# 1. each row is a list
csv=[['A1', 'A2', 'A3'], ['B1', 'B2', 'B3']]

# 2. each row is a dictionary
csv=[{'name1': 'A1', 'name2': 'A2', 'name3': 'A3'}, 
     {'name1': 'A1', 'name2': 'A2', 'name3': 'A3'}]


import unicodecsv

enrollments=[]
f=open('enrollments.csv', 'rb') # the file is opened for reading
# each row will be a dictionary
reader = unicodecsv.DictReader(f)
# can only loop over iterator once
for row in reader:
    enrollments.append(row)
f.close()
# print out the 1st row
enrollments[0]

# use with statement to avoid closing a file
import unicodecsv
enrollments=[]

with open('enrollments.csv', 'rb') as f: 
    reader = unicodecsv.DictReader(f)
    for row in reader:
        enrollments.append(row) # the file will be automatically closed when indent ends 

# an easier way to convert iterator to a list
import unicodecsv

with open('enrollments.csv', 'rb') as f: 
    reader = unicodecsv.DictReader(f)
    enrollments=list(reader)
enrollments[0]
    

## read in data from daily_engagement.csv and project_submissions.csv
import unicodecsv

daily_engagement = []
project_submissions = []

# engagement_filename = '/datasets/ud170/udacity-students/daily_engagement.csv'

with open('daily_engagement.csv', 'rb') as f: 
    reader = unicodecsv.DictReader(f)
    for row in reader:
        daily_engagement.append(row)
        
daily_engagement[0]

with open('project_submissions.csv', 'rb') as f: 
    reader = unicodecsv.DictReader(f)
    for row in reader:
        project_submissions.append(row)
        
project_submissions[0]

# a shorter version
import unicodecsv

with open('daily_engagement.csv', 'rb') as f: 
    reader = unicodecsv.DictReader(f)
    daily_engagement=list(reader)
print(daily_engagement[0])
    
# write a function - read_csv
import unicodecsv
def read_csv(filename):
    with open(filename, 'rb') as f: 
        reader = unicodecsv.DictReader(f)
        return list(reader)
    
# call function
enrollments = read_csv('enrollments.csv')
daily_engagement = read_csv('daily_engagement.csv')
project_submissions = read_csv('project_submissions.csv')
   
enrollments[0]   
    
##################
## Fixing data types
#################

# convert string to datetime object
from datetime import datetime as dt

def parse_date(date): # input date string
    if date == '':
        return None
    else:
        return dt.strptime(date, '%Y-%m-%d')
    
def parse_maybe_int(i): # input date string
    if i == '':
        return None
    else:
        return int(i)

# clean up date types in the enrollments table
for enrollment in enrollments:
    enrollment['cancel_date'] = parse_date(enrollment['cancel_date'])
    enrollment['days_to_cancel'] = parse_maybe_int(enrollment['days_to_cancel'] )
    enrollment['is_canceled'] = enrollment['is_canceled'] == 'True' # boolean
    enrollment['is_udacity'] = enrollment['is_udacity'] == 'True'
    enrollment['join_date'] = parse_date(enrollment['join_date'])

enrollments[0]


# engagement table
for engagement_record in daily_engagement:
    engagement_record['lessons_completed'] = int(float(engagement_record['lessons_completed']))
    engagement_record['num_courses_visited'] = int(float(engagement_record['num_courses_visited']))
    engagement_record['projects_completed'] = int(float(engagement_record['projects_completed']))
    engagement_record['total_minutes_visited'] = float(engagement_record['total_minutes_visited'])
    engagement_record['utc_date'] = parse_date(engagement_record['utc_date'])

daily_engagement[0]

# submissions table
for submission in project_submissions:
    submission['completion_date'] = parse_date(submission['completion_date'])
    submission['creation_date'] = parse_date(submission['creation_date'])

project_submissions[0]

## Rename column - modify the list
for each in daily_engagement:
    each['account_key'] = each['acct'] # create a new key
    del each['acct']
    
daily_engagement[0]['account_key']

def get_unique_students(data):
    unique_students = set()
    for data_point in data:
        unique_students.add(data_point['account_key'])
    return unique_students

unique_enrolled_students = get_unique_students(enrollments)
unique_engaged_students = get_unique_students(daily_engagement)
unique_submitted_students = get_unique_students(project_submissions)

## the number of rows in the three tables
len(enrollments) # 1640
len(daily_engagement) # 136240, multiple entries for each student
len(project_submissions) # 3642

## the number of unique students in the table

# create an empty set
enrollments[0]
unique_enrolled_students = set()
for enrollment in enrollments:
    unique_enrolled_students.add(enrollment['account_key']) 
len(unique_enrolled_students) #1302

daily_engagement[0]
unique_engaged_students = set()
for engagement in daily_engagement:
    unique_engaged_students.add(engagement['acct']) 
len(unique_engaged_students) # 1237
# type(engagement['acct'])

project_submissions[0]
unique_submitted_students = set()
for submission in project_submissions:
    unique_submitted_students.add(int(float(submission['account_key'])))
len(unique_submitted_students) # 743


## Identify enrolled students with no engagement record
daily_engagement[0]
enrollments[0]

for each in enrollments:
    student = each['account_key']
    if student not in unique_engaged_students:
        print(each)
        break # only print one of the qualified selections from the enrollments table; exit the loop using break
# join and cancel dates are the same


## the number of rows in the enrollments table where the student stayed enrolled
#  at least one day and there is no entry fro that account key in the daily engagement table  

# create a variable to store targets
num_problem_students = 0

for each in enrollments:
    student = each['account_key']
    if (student not in unique_engaged_students) \
    and (each['join_date'] != each['cancel_date']):
        num_problem_students += 1
        
print(num_problem_students) # 3

# print out all of them: those are test accounts ('is_udacity', True). They are not guranteed to appear in the engagement table
for each in enrollments:
    student = each['account_key']
    if (student not in unique_engaged_students) \
    and (each['join_date'] != each['cancel_date']):
        print(each)

## Identify Udacity test accounts
udacity_test_accounts = set()

for each in enrollments:
    if each['is_udacity']:
        udacity_test_accounts.add(each['account_key'])
        
print(udacity_test_accounts)
len(udacity_test_accounts) # 6

# Remove data associated with those accounts
def remove_udacity_accounts(data):
    non_udacity_data = []
    for data_point in data:
        if data_point['account_key'] not in udacity_test_accounts:
            non_udacity_data.append(data_point)
    return non_udacity_data

# Pull out the non-test account elements
non_udacity_enrollments = remove_udacity_accounts(enrollments)
non_udacity_engagement = remove_udacity_accounts(daily_engagement)
non_udacity_submissions = remove_udacity_accounts(project_submissions)

print(len(non_udacity_enrollments)) # 1622
print(len(non_udacity_engagement)) # 135656
print(len(non_udacity_submissions)) # 3634


#############
# Exploration
#############

## Paid Students

# daily_engagement[0]
# enrollments[0]

paid_students = {}

for each in non_udacity_enrollments:
    if not each['is_canceled'] or each['days_to_cancel'] > 7:
        account_key = each['account_key']
        enrollment_date = each['join_date']
        
        # add to paid_students dictionary - key (account_key) and value (enrollment_date)
        if account_key not in paid_students or \
            enrollment_date > paid_students[account_key]: # save the most recent date instead of an arbitrary one
            paid_students[account_key] = enrollment_date

print(len(paid_students)) # 995

## Get data from the first week
# students in paid_student
# within one week of the student's join date

# the engagement record happened within one week of the student joining
def within_one_week(join_date, engagement_date):
    time_delta = engagement_date - join_date # engagement happened after joining
    return time_delta.days < 7 and time_delta.days>=0

# exclude accounts that cancel free trials
def remove_free_trial_cancels(data):
    # create a list
    new_data = []
    for each in data:
        if each['account_key'] in paid_students:
            new_data.append(each)
    return(new_data)

paid_enrollments = remove_free_trial_cancels(non_udacity_enrollments)
paid_engagement = remove_free_trial_cancels(non_udacity_engagement)
paid_submissions = remove_free_trial_cancels(non_udacity_submissions)


paid_engagement_in_first_week = []

for data_point in paid_engagement:
    account_key = data_point['account_key']
    join_date = paid_students[account_key]
    engagement_record_date = data_point['utc_date']
    if within_one_week(join_date, engagement_record_date):
        # pre-defined above
        paid_engagement_in_first_week.append(data_point)

len(paid_engagement_in_first_week) # 6919      


## Average mins spent in classroom
from collections import defaultdict

engagement_by_account = defaultdict(list) # if I ever try to look up a key
#                                           in the dictionary and the key is not there,
#                                           I'll get the empty list instead
    
for data_point in paid_engagement_in_first_week:
    account_key = data_point['account_key'] # save account keys in the variable
    
    # look up the list of engagement records for that account key
    engagement_by_account[account_key].append(data_point) # if never added that account key yet, then I get the empty list
    #                                                 append engagement record to that account key
    
# add up the number of mins vistied by each account, save in dictionary
total_minutes_by_account = {} # a number for each account key

#    key,         value
# looping over the .times, I got both the key and value for each entry in the dictionary
for account_key, engagement_for_student in engagement_by_account.items():
    total_minutes = 0 # initialize for each account
    # add up using values
    for data_point in engagement_for_student: # engagement_for_student is a list of engagement records of each account
        total_minutes += data_point['total_minutes_visited']
    # store the sum under account key
    total_minutes_by_account[account_key] = total_minutes

# only get the values in dictionary, account_key no longer relevant
total_minutes = total_minutes_by_account.values()
# total_minutes_by_account.keys()

# Calculate mean
import numpy as np

print('Mean:', np.mean(list(total_minutes))) # 306.708326753
print('Standard Deviation:', np.std(list(total_minutes))) # 412.996933409
print('Minimum:', np.min(list(total_minutes))) # 0
print('Maximum:', np.max(list(total_minutes))) # 3564.7332645


# Identify the student who has the max minutes
student_with_max_minutes = None
max_minutes = 0

for student, total_minutes in total_minutes_by_account.items():
    if total_minutes > max_minutes:
        # reset
        max_minutes = total_minutes
        student_with_max_minutes = student
        
max_minutes # 3564.7332645
student_with_max_minutes # '163'

# print all engagement records for that student
for engagement_record in paid_engagement_in_first_week:
    if engagement_record['account_key'] == student_with_max_minutes:
        print(engagement_record)

