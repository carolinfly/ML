@My Kaggle output: https://www.kaggle.com/carolinfly0218/model-validation

I use Mean Absolute Error (MAE) to measure model quality: take the absolute value of each error (error = actual âˆ’ predicted), then take the average of those absolute errors. 
Interpretation: on average, our predictions are off by about X

from sklearn.tree import DecisionTreeRegressor

melbourne_model = DecisionTreeRegressor()
melbourne_model.fit(X, y)

from sklearn.metrics import mean_absolute_error

predicted_home_prices = melbourne_model.predict(X)
mean_absolute_error(y, predicted_home_prices)

# Note:
The above is "in-sample" score.
I use a single set of houses (called a data sample) for both building the model and for calculating it's MAE score.
The training set may have certain patter that may not appear in the new data which will lead to an inaccurate model.

# Use validation data:
Exclude some data from the model-building process, and then use those to test the model's accuracy on data it hasn't seen before. 

from sklearn.model_selection import train_test_split
train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)

melbourne_model = DecisionTreeRegressor()
melbourne_model.fit(train_X, train_y)

# get predicted prices on validation data
val_predictions = melbourne_model.predict(val_X)
print(mean_absolute_error(val_y, val_predictions))

###########
# Example
###########

import pandas as pd
main_file_path = '../input/house-prices-advanced-regression-techniques/train.csv'
data = pd.read_csv(main_file_path)

y = data.SalePrice
predictors = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 
                        'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']
X = data[predictors]

from sklearn.model_selection import train_test_split
train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)

model = DecisionTreeRegressor()
model.fit(train_X, train_y)

# get predicted prices on validation data
val_predictions = model.predict(val_X)
print(mean_absolute_error(val_y, val_predictions))

